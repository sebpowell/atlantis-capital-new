// Grid settings
// $grid: ();
$column-numbers: 12
$column-width: 100% / $column-numbers
$size-grid-gutter: 															sizes(double-half)


// // Do I need this?

// Are both grid and columns
@for $i from 1 through $column-numbers
	@each $key, $value in $breakpoints
		.grid-#{$i}-#{$key}
			+no-bullet
			+clearfix
			margin-left: -$size-grid-gutter
			margin-right: -$size-grid-gutter
			@if $i < 1
				margin-left: 0
				margin-right: 0
			> li
				width: 100%
				margin-bottom: $size-grid-gutter
				&:nth-child(#{$i}n + 1)
					// Clears floats after a row is complete for variable height elements. 
					clear: both

				@if $i < 1
					padding: 0
				+respond-above($key)
					width: 100% / $i !important
					float: left
					padding: 0 $size-grid-gutter !important
					// &:nth-last-of-type(-n+#{$i})
					// 	margin-bottom: 0

@for $i from 1 through $column-numbers
	@each $key, $value in $breakpoints
		.columns-#{$i}-#{$key}
			width: 100%
			@if $i == 12
				margin-left: 0
				margin-right: 0
				
			+respond-above($key)
				width: $i * $column-width
				float: left
				padding: 0 sizes(base)
				// &:nth-last-of-type(-n+#{$i})
				// 	margin-bottom: 0


.no-gutter
	margin-left: 0 !important
	margin-right: 0 !important
	> [class^="column"], > li
		padding: 0 !important
// // Generate gutter widths
// @each $size, $var in $sizes
// 	.gutter-#{$size}
// 		+above(device-medium)
// 			// Added margin to factor in container-wide padding on smaller sizes
// 			margin-left: -($var) !important
// 			margin-right: -($var) !important
// 			> [class^="column"], > li
// 				padding: 0 $var !important
// 				// Add mobile 


// Generates classes for columns 1 - 12.
@for $i from 1 through $column-numbers
	.columns-#{$i}
		width: 100%
		float: left
		margin-bottom: sizes(double)
		&:last-child
			margin-bottom: 0
		+respond-above(device-small)
			padding: 0 $size-grid-gutter
			margin-bottom: 0
			width: $i * $column-width
			// Add nth-class helper
			
// Generates classes for column offsets.
@for $i from 1 through $column-numbers
	.offset-#{$i}
		+respond-above(device-medium-large)
			margin-left: $i * $column-width

// Grid Container & Helper Classes
// Start with a row container. Inside the row container, use the columns. The module or component is then place dinside each column.
// Change ths to /columns-cotainer?
.row
	+clearfix
	position: relative
	
	&.vertical-align
		+respond-above(device-medium-large)
			display: table
			> [class^="column"]
				float: none
				height: 100%
				display: table-cell
				vertical-align: middle
		
	
	+respond-above(device-medium-large)
		margin-left: -(sizes(base))
		margin-right: -(sizes(base))
		// > [class^="column"]
		// 	padding: 0





// // .page-container {
// //   // padding: 0 2rem;
// //   // Experiment with this - how to remove requirement for outer containers?
// // }




// // @mixin site-padding {
// //   padding: 0 sizes(base);
// //   @include respond(device-medium) {
// //     padding: 0 sizes(double);
// //   }
// // }



// Should we have range instead? 

@mixin grid-test($map)
	@include clearfix
	padding: sizes(double)
	width: 100%
	float: left
	
	@each $key, $value in $breakpoints
		@if map-get($map, $key)
			+respond-above($key)
				width: (100% / 12) * map-get($map, $key)



// =grid-test($map)
// 	@include clearfix
// 	// $total-margin: (map-get($map, row-items-desktop) - 1)  * map-get($map, margin)
// 	// $width: 100% - $total-margin
// 	// margin-left: -1rem
// 	// margin-right: -1rem
// 	padding: sizes(double)
// 	width: 100%
// 	@if map-get($map, device-small)
// 		+respond-above(device-small)
// 			width: 100% / map-get($map, device-small)
	
// 	// @each $key, $value in $map


